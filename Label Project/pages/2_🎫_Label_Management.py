# pages/2_üé´_Label_Management.py

import base64
import streamlit as st
import pandas as pd
import math
import qrcode
import barcode
from barcode.writer import ImageWriter
import html
import textwrap
import logging
import json
from services import labels_v2 as labels_svc
from services import printer as printer_svc
from services import form_builder as form_builder_svc
from st_aggrid import AgGrid, GridOptionsBuilder, DataReturnMode
from streamlit_modal import Modal
from datetime import datetime, timedelta, date
from io import BytesIO
from utils.auth import AuthManager
from utils.s3_utils import S3Manager

logger = logging.getLogger(__name__)

# Authentication check
auth_manager = AuthManager()
if not auth_manager.require_auth():
    st.stop()

# Initialize S3
try:
    s3_manager = S3Manager()
except Exception as e:
    st.error("Unable to connect to file storage service. Please contact support.")
    logger.error(f"S3 initialization failed: {e}")
    st.stop()

st.set_page_config(layout="wide")
st.title("üè∑Ô∏è Label Management")

# KH·ªûI T·∫†O DEF, STATE V√Ä MODAL

# session_state qu·∫£n l√Ω tab ƒëang ho·∫°t ƒë·ªông
if 'active_tab' not in st.session_state:
    st.session_state.active_tab = "üì¶ Select Product"

# x·ª≠ l√Ω chuy·ªÉn tab t·ª± ƒë·ªông qua button
if 'next_tab' in st.session_state:
    st.session_state.active_tab = st.session_state.next_tab
    del st.session_state.next_tab

# session_state l∆∞u s·∫£n ph·∫©m ƒë√£ ch·ªçn
if 'product_for_label' not in st.session_state:
    st.session_state.product_for_label = None

# session_state l∆∞u customer_id
if 'customer_id_for_label' not in st.session_state:
    st.session_state.customer_id_for_label = None

# session_state l∆∞u entity_id
if 'entity_id_for_label' not in st.session_state:
    st.session_state.entity_id_for_label = None

# session_state l∆∞u tr·ªØ th√¥ng tin cu·ªëi c√πng ƒë·ªÉ hi·ªÉn th·ªã tr√™n nh√£n
if 'label_preview_data' not in st.session_state:
    st.session_state.label_preview_data = {}

# session_state l∆∞u tr·ªØ t·∫°m th√¥ng tin form tr∆∞·ªõc khi confirm
if 'temp_label_form_data' not in st.session_state:
    st.session_state.temp_label_form_data = {}
if 'temp_label_settings' not in st.session_state:
    st.session_state.temp_label_settings = {}
if 'temp_content_fields_map' not in st.session_state:
    st.session_state.temp_content_fields_map = {}

# modal review th√¥ng tin s·∫£n ph·∫©m
confirm_modal = Modal(
    "Review Product Information",
    key="confirm_product_modal",
    max_width=700
)

# modal review n·ªôi dung nh√£n ƒë∆∞·ª£c nh·∫≠p t·ª´ form
review_label_modal = Modal(
    "Review Label Information",
    key="review_label_modal",
    max_width=700
)

def confirm_label_and_update_preview():
    
    form_data = st.session_state.get('temp_label_form_data', {})
    product_info = st.session_state.get('product_for_label', {})
    settings = st.session_state.get('temp_label_settings', {})
    confirmed_label_type = settings.get("label_type")

    if confirmed_label_type in ["ITEM_LABEL", "CARTON_LABEL"]:
        updated_data = form_data.copy()
    else:
        updated_data = {**product_info, **form_data}

    st.session_state.label_preview_data = updated_data

    if confirmed_label_type != "PACKAGE_LABEL":
        if "is_package_from_history" in st.session_state:
            del st.session_state.is_package_from_history
        if "package_history_data" in st.session_state:
            del st.session_state.package_history_data

    # X√≥a d·ªØ li·ªáu t·∫°m
    st.session_state.temp_label_form_data = {}
    st.session_state.temp_label_settings = {}
    st.session_state.temp_content_fields_map = {}

    review_label_modal.close()
    st.toast("Updated preview with new information!", icon="‚úÖ")

def confirm_and_switch_tab(product_data, customer_id, entity_id):
    
    st.session_state.product_for_label = product_data
    st.session_state.customer_id_for_label = customer_id
    st.session_state.entity_id_for_label = entity_id
    st.session_state.next_tab = "üëÅÔ∏è‚Äçüó®Ô∏è Preview and Create Label"
    st.session_state.label_preview_data = product_data.copy()
    confirm_modal.close()
    
    if "is_package_from_history" in st.session_state:
        del st.session_state.is_package_from_history
    if "package_history_data" in st.session_state:
        del st.session_state.package_history_data

def switch_to_select_product_tab():
    
    st.session_state.next_tab = "üì¶ Select Product"

    # X√≥a d·ªØ li·ªáu c≈© khi quay l·∫°i
    st.session_state.product_for_label = None
    st.session_state.customer_id_for_label = None
    st.session_state.entity_id_for_label = None
    st.session_state.label_preview_data = {}

    if "is_package_from_history" in st.session_state:
        del st.session_state.is_package_from_history
    if "package_history_data" in st.session_state:
        del st.session_state.package_history_data

# --- GIAO DI·ªÜN CH√çNH ---

label_management_tabs = [
    "üì¶ Select Product",
    "üëÅÔ∏è‚Äçüó®Ô∏è Preview and Create Label",
    "‚åõ History Label Printing"
]

tab_selection = st.radio(" ", label_management_tabs, key="active_tab", horizontal=True, label_visibility="collapsed")

st.divider()

# --- TAB 1: L·ª∞A CH·ªåN S·∫¢N PH·∫®M ---
if tab_selection == "üì¶ Select Product":
    
    @st.cache_data(ttl=600)
    def load_initial_data():
        customers = labels_svc.get_active_customers()
        entities = labels_svc.get_active_entities()
        return customers, entities

    @st.cache_data(ttl=600)
    def load_dns(customer_code: str, entity_code: str):
        if not customer_code or not entity_code: return []
        return labels_svc.get_dns_for_customer_and_entity(customer_code, entity_code)

    @st.cache_data(ttl=600)
    def load_products(dns: tuple[str], group_by_batch: bool):
        if not dns: return []
        return labels_svc.get_products_by_dns(list(dns), group_by_batch_no=group_by_batch)

    customers, entities = load_initial_data()

    selected_customer = None
    selected_entity = None
    selected_dns = []

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üë• Customer")
        if customers:
            selected_customer = st.selectbox(
                label="*Choose Customer",
                options=customers,
                format_func=lambda customer: f"{customer['customer_english_name']} ({customer['customer_code']})",
                index=None,
                placeholder="Find and select customers...",
                key="customer_selector"
            )
        else:
            st.warning("No customer data to display", icon="üö®")

    with col2:
        st.subheader("üë§ Entity")
        if entities:
            selected_entity = st.selectbox(
                label="*Choose Entity",
                options=entities,
                format_func=lambda entity: f"{entity['entity_english_name']} ({entity['entity_code']})",
                index=None,
                placeholder="Find and select entities...",
                key="entity_selector"
            )
        else:
            st.warning("No entity data to display", icon="üö®")

    if selected_customer and selected_entity:

        st.subheader("üìÉ DN Number")
        customer_code = selected_customer.get('customer_code')
        entity_code = selected_entity.get('entity_code')
        dns_list = load_dns(customer_code, entity_code)
        
        if dns_list:
            if 'dn_df' not in st.session_state or set(st.session_state.dn_df['DN Number']) != set(dns_list):
                st.session_state.dn_df = pd.DataFrame({
                    'Choose': [False] * len(dns_list),
                    'DN Number': dns_list
                })

            def select_all_dns():
                st.session_state.dn_df['Choose'] = True

            def deselect_all_dns():
                st.session_state.dn_df['Choose'] = False

            btn_col1, btn_col2, _ = st.columns([1, 1, 4])

            with btn_col1:
                st.button("Select All", on_click=select_all_dns, width='stretch', type="primary")
            with btn_col2:
                st.button("Deselect all", on_click=deselect_all_dns, width='stretch')

            edited_dn_df = st.data_editor(
                st.session_state.dn_df,
                width='stretch',
                hide_index=True,
                disabled=["DN Number"] 
            )

            selected_dns = edited_dn_df[edited_dn_df['Choose']]['DN Number'].tolist()
        else:
            st.warning("There are no DN Number in 'STOCKED_OUT' state for this selection", icon="üö®")
    else:
        st.info("Select Customer and Entity to continue")

    st.divider()

    selected_product_df = pd.DataFrame()

    if selected_dns:
        st.subheader("üì¶ Product List")
        grouping_option = st.radio(
            label="Group Products By:",
            options=("Product ID & Batch No", "Product ID"),
            horizontal=True,
        )
        group_by_batch = (grouping_option == "Product ID & Batch No")
        product_list = load_products(tuple(selected_dns), group_by_batch=group_by_batch)
        
        if product_list:
            df_products = pd.DataFrame(product_list)
            st.write(f"Found: **{len(df_products)}** products")
            st.caption("Select a product from the table below to prepare the label for printing")
            
            gb = GridOptionsBuilder.from_dataframe(df_products)
            gb.configure_selection('single', use_checkbox=True, header_checkbox=False)
            gb.configure_pagination(paginationAutoPageSize=True)
            gb.configure_side_bar()
            gridOptions = gb.build()

            grid_response = AgGrid(
                df_products,
                gridOptions=gridOptions,
                data_return_mode=DataReturnMode.AS_INPUT,
                update_on=['selectionChanged'],
                fit_columns_on_grid_load=True,
                height=350,
                width='100%',
                key='product_grid'
            )
            selected_product_df = pd.DataFrame(grid_response['selected_rows'])
        else:
            st.warning("No products found for the selected businesses", icon="üö®")

    elif selected_customer and selected_entity:
        st.info("Select a DN Number to view the product list")

    is_product_selected = not selected_product_df.empty

    open_modal_button = st.button(
        "üëÅÔ∏è Review Selected Product",
        width='stretch',
        type="primary",
        disabled=not is_product_selected
    )

    if open_modal_button:
        confirm_modal.open()

    if confirm_modal.is_open():
        with confirm_modal.container():
            
            display_df = selected_product_df.drop(columns=['_selectedRowNodeInfo'], errors='ignore')
            st.dataframe(display_df, hide_index=True, width='stretch')
            
            st.divider()

            modal_col1, modal_col2 = st.columns(2)
            with modal_col1:
                product_data_to_pass = display_df.to_dict('records')[0]
                customer_id_to_pass = selected_customer.get('customer_id') if selected_customer else None
                entity_id_to_pass = selected_entity.get('entity_id') if selected_entity else None
                
                st.button(
                    "‚úÖ Confirm", 
                    type="primary", 
                    width='stretch',
                    on_click=confirm_and_switch_tab,
                    args=(product_data_to_pass, customer_id_to_pass, entity_id_to_pass)
                )
            with modal_col2:
                if st.button("‚ùå Cancel", width='stretch'): confirm_modal.close()
    
    if not is_product_selected:
        st.caption("Select a product to continue")

# --- TAB 2: XEM TR∆Ø·ªöC V√Ä T·∫†O NH√ÉN ---
elif tab_selection == "üëÅÔ∏è‚Äçüó®Ô∏è Preview and Create Label":

    @st.cache_data(ttl=300)
    def load_label_requirements(customer_id: int):
        if not customer_id:
            return []
        return labels_svc.get_customer_label_requirements(customer_id)
    
    @st.cache_data(ttl=300)
    def load_label_content_fields(requirement_id: int):
        if not requirement_id:
            return []
        return labels_svc.get_label_content_fields(requirement_id)

    if st.session_state.product_for_label:
        product_info = st.session_state.product_for_label
        customer_id = st.session_state.get('customer_id_for_label')
        entity_id = st.session_state.get('entity_id_for_label')
        label_requirements = load_label_requirements(customer_id)
        
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìÉ Product Information")
            with st.container(border=True):
                c1_info, c2_info = st.columns(2)
                with c1_info:
                    st.text_input("Customer", value=product_info.get('customer', 'N/A'), disabled=True)
                    st.text_input("DN Number", value=product_info.get('dn_number', 'N/A'), disabled=True)
                    st.text_input("Vendor Product Code", value=product_info.get('product_mapped_code', 'N/A'), disabled=True)
                    st.text_input("PT Code", value=product_info.get('pt_code', 'N/A'), disabled=True)
                    st.text_input("Package Size", value=product_info.get('package_size', 'N/A'), disabled=True)
                    st.text_input("Total Standard Qty", value=product_info.get('total_standard_qty', 'N/A'), disabled=True)
                    st.text_input("Brand", value=product_info.get('brand', 'N/A'), disabled=True)
                with c2_info:
                    st.text_input("Entity", value=product_info.get('legal_entity', 'N/A'), disabled=True)
                    st.text_input("Product Code", value=product_info.get('product_pn', 'N/A'), disabled=True)
                    st.text_input("Vendor Product Name", value=product_info.get('product_mapped_name', 'N/A'), disabled=True)
                    st.text_input("Batch No", value=product_info.get('batch_no', 'N/A'), disabled=True)
                    st.text_input("Shelf Life", value=product_info.get('shelf_life', 'N/A'), disabled=True)
                    st.text_input("Total Selling Qty", value=product_info.get('total_selling_qty', 'N/A'), disabled=True)
                    st.text_input("UOM", value=product_info.get('uom', 'N/A'), disabled=True)

        number_of_labels = 0
        qty_per_carton = 1
        form_data = {}
        content_fields = []

        with col2:
            st.subheader("üé´ Customer Label Requirements")

            selected_requirement = None

            if label_requirements:
                if len(label_requirements) > 1:
                    requirement_options = {
                        f"{req['requirement_name']} ({req['requirement_type']})": req
                        for req in label_requirements
                    }
                    selected_option_key = st.selectbox(
                        "Select a label requirement:",
                        options=requirement_options.keys()
                    )
                    selected_requirement = requirement_options[selected_option_key]
                else:
                    selected_requirement = label_requirements[0]

            if selected_requirement:
                with st.container(border=True):
                    req_col1, req_col2 = st.columns(2)
                    with req_col1:
                        st.text_input("Label Name", value=selected_requirement.get('requirement_name', 'N/A'), disabled=True, key="selected_req_name")
                        st.text_input("Label Type", value=selected_requirement.get('requirement_type', 'N/A'), disabled=True, key="selected_req_type")
                        st.text_input("Printer Dpi", value=selected_requirement.get('printer_dpi', 'N/A'), disabled=True, key="selected_req_dpi")
                    with req_col2:
                        st.text_input("Label Size", value=selected_requirement.get('label_size', 'N/A'), disabled=True, key="selected_req_size")
                        st.text_input("Special Notes", value=selected_requirement.get('special_notes', 'N/A'), disabled=True, key="selected_req_notes")
                        st.text_input("Printer Type", value=selected_requirement.get('printer_type', 'N/A'), disabled=True, key="selected_req_printer")
            else:
                st.warning("No existing Customer Label Requirements")

        st.divider()

        st.subheader("‚å®Ô∏è Enter data for the label")

        # L·∫•y c·ªù kh√≥a (lock flag) ra ngo√†i ƒë·ªÉ c·∫£ col1 (form) v√† col2 (settings) ƒë·ªÅu d√πng ƒë∆∞·ª£c
        is_locked_for_package = st.session_state.get("is_package_from_history", False)

        col1, col2 = st.columns(2)
        with col1:
            if selected_requirement:
                with st.container(border=True):

                    if is_locked_for_package:
                        st.info("‚ÑπÔ∏è Data entry is disabled when creating a Package Label from history. Data will be aggregated from selected items.")

                    requirement_id = selected_requirement.get('id')
                    content_fields = load_label_content_fields(requirement_id)

                    if content_fields:
                        form_col1, form_col2 = st.columns(2)
                        for i, field in enumerate(content_fields):
                            target_col = form_col1 if i % 2 == 0 else form_col2
                            with target_col:
                                field_type = field.get('field_type', 'TEXT').upper()
                                label = field.get('field_name')
                                placeholder = field.get('sample_value')
                                key = f"dynamic_field_{field.get('id')}"
                                field_code = field.get('field_code')

                                default_value = st.session_state.label_preview_data.get(field_code, "")

                                value = None

                                if field_type == 'NUMBER':
                                    value = st.number_input(
                                        label=label,
                                        placeholder=placeholder,
                                        key=key,
                                        step=1,
                                        format="%d",
                                        value=int(default_value) if isinstance(default_value, (int, float)) or (isinstance(default_value, str) and default_value.isdigit()) else 0,
                                        disabled=is_locked_for_package
                                    )
                                elif field_type == 'DATE':
                                    try:
                                        default_date = datetime.strptime(str(default_value) if default_value else placeholder, "%Y-%m-%d").date()
                                    except (ValueError, TypeError):
                                        default_date = datetime.now().date()
                                    value = st.date_input(
                                        label=label, 
                                        key=key, 
                                        value=default_date,
                                        disabled=is_locked_for_package
                                    )
                                else:
                                    value = st.text_input(
                                        label=label,
                                        placeholder=placeholder,
                                        key=key,
                                        value=str(default_value),
                                        disabled=is_locked_for_package
                                    )
                                
                                if value is not None:
                                    form_data[field.get('field_code')] = value
                    else:
                        st.warning("This label request has no content fields", icon='üö®')
        with col2:
            with st.container(border=True):

                label_type_options = ["ITEM_LABEL", "CARTON_LABEL", "PACKAGE_LABEL"]
                default_index = 0
                
                if is_locked_for_package:
                    # 1. ∆Øu ti√™n cao nh·∫•t: Kh√≥a n·∫øu l√† package t·ª´ history
                    default_index = label_type_options.index("PACKAGE_LABEL")
                    # X√≥a c·ªù "override" d√πng m·ªôt l·∫ßn n·∫øu c√≥, v√¨ c·ªù "is_locked" ƒë√£ thay th·∫ø
                    if 'default_label_type_override' in st.session_state:
                        del st.session_state.default_label_type_override
                
                elif 'default_label_type_override' in st.session_state and st.session_state.default_label_type_override in label_type_options:
                    # 2. ∆Øu ti√™n nh√¨: T√≠n hi·ªáu 1 l·∫ßn (n·∫øu c√≥, m·∫∑c d√π Tab 3 set c·∫£ 2)
                    default_index = label_type_options.index(st.session_state.default_label_type_override)
                    # X√≥a t√≠n hi·ªáu ƒë·ªÉ kh√¥ng b·ªã d√≠nh cho l·∫ßn sau
                    del st.session_state.default_label_type_override
                
                elif selected_requirement: 
                    # 3. M·∫∑c ƒë·ªãnh: L·∫•y t·ª´ requirement
                    default_label_type = selected_requirement.get('requirement_type')
                    if default_label_type in label_type_options:
                        default_index = label_type_options.index(default_label_type)

                label_template = st.selectbox(
                    "Label Type:",
                    options=label_type_options,
                    index=default_index,
                    disabled=is_locked_for_package
                )

                total_selling_qty = int(product_info.get('total_selling_qty', 0))

                if label_template == "ITEM_LABEL" or label_template == "CARTON_LABEL":
                    qty_per_carton_value = int(product_info.get('total_standard_qty', 1))
                    qty_per_carton = st.number_input(
                        "Quantity Per Carton:",
                        min_value=1,
                        max_value=total_selling_qty if total_selling_qty > 0 else 1,
                        value=qty_per_carton_value,
                        help=f"Nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong m·ªôt th√πng / m·ªôt pcs. T·ªëi ƒëa: {total_selling_qty}"
                    )
                    ceil_value = math.ceil(total_selling_qty / qty_per_carton) if qty_per_carton > 0 else 0
                    floor_value = math.floor(total_selling_qty / qty_per_carton) if qty_per_carton > 0 else 0
                    if ceil_value == floor_value or floor_value == 0:
                        number_of_labels = st.number_input(
                            "Number of Labels:",
                            value=ceil_value,
                            disabled=True,
                            help="S·ªë l∆∞·ª£ng th√πng ƒë∆∞·ª£c t√≠nh t·ª± ƒë·ªông b·∫±ng c√¥ng th·ª©c total_selling_quantity / Quantity Per Carton"
                        )
                    else:
                        st.caption("Due to odd products, please select the number of boxes to print labels")
                        number_of_labels = st.radio(
                            "Select the number of labels:",
                            options=[floor_value, ceil_value],
                            index=1,
                            format_func=lambda x: f"{x} labels (Round down)" if x == floor_value else f"{x} labels (Round up)",
                            horizontal=True
                        )
                else: # PACKAGE_LABEL
                    number_of_labels = st.number_input(
                        "Number of Label:",
                        min_value=1,
                        value=1,
                        disabled=True,
                        help="V·ªõi 'PACKAGE_LABEL', s·ªë l∆∞·ª£ng nh√£n lu√¥n l√† 1"
                    )

        if st.button("üëÅÔ∏è Preview Label", type="primary", width='stretch'):

            errors = {}
            
            if label_template != "PACKAGE_LABEL":
                data_for_validation = {
                    field.get('field_name'): form_data.get(field.get('field_code'))
                    for field in content_fields
                }
                
                errors = form_builder_svc.validate_form(data_for_validation, content_fields)
            
            if errors:
                error_messages = []
                for field_name, message in errors.items():
                    error_messages.append(f"- **{field_name}** {message}")
                st.warning("Please check the form again:\n" + "\n".join(error_messages), icon="üö®")
            else:
                st.session_state.temp_label_form_data = form_data
                st.session_state.temp_label_settings = {
                    "label_type": label_template, 
                    "number_of_labels": number_of_labels
                }
                st.session_state.temp_content_fields_map = {
                    f.get('field_code'): f.get('field_name') for f in content_fields
                }
                review_label_modal.open()

        # Hi·ªÉn th·ªã modal review
        if review_label_modal.is_open():
            with review_label_modal.container():
                
                # L·∫•y d·ªØ li·ªáu t·∫°m th·ªùi
                form_data_review = st.session_state.get('temp_label_form_data', {})
                settings_review = st.session_state.get('temp_label_settings', {})
                field_map_review = st.session_state.get('temp_content_fields_map', {})

                st.subheader("‚å®Ô∏è Label Data")
                with st.container(border=True):
                    col_set1, col_set2 = st.columns(2)
                    with col_set1:
                        st.text_input("Label Type", value=settings_review.get('label_type', 'N/A'), disabled=True, key="modal_label_type")
                    with col_set2:
                        st.text_input("Number of Labels", value=settings_review.get('number_of_labels', 'N/A'), disabled=True, key="modal_num_labels")
                if form_data_review:
                    display_data = []
                    for field_code, value in form_data_review.items():
                        field_name = field_map_review.get(field_code, field_code) 
                        display_data.append({"Field": field_name, "Data": str(value)})
                    
                    st.dataframe(pd.DataFrame(display_data), hide_index=True, width='stretch')
                else:
                    st.warning("No additional data is entered", icon="üö®")
                
                st.divider()

                modal_col1, modal_col2 = st.columns(2)
                with modal_col1:
                    st.button(
                        "‚úÖ Confirm & Update Preview", 
                        type="primary", 
                        width='stretch',
                        on_click=confirm_label_and_update_preview
                    )
                with modal_col2:
                    if st.button("‚ùå Cancel", width='stretch'):
                        st.session_state.temp_label_form_data = {}
                        st.session_state.temp_label_settings = {}
                        st.session_state.temp_content_fields_map = {}
                        review_label_modal.close()

        st.divider()
        
        st.header("üëÅÔ∏è‚Äçüó®Ô∏è Preview & Customize Layout")

        st.divider()

        lt_name = selected_requirement.get('requirement_name', 'Untitled Label') if selected_requirement else 'Untitled Label'
        
        # D·ªØ li·ªáu c∆° s·ªü (th√¥ng tin s·∫£n ph·∫©m + d·ªØ li·ªáu form m·ªõi)
        base_label_info = st.session_state.label_preview_data

        label_info = {}
        
        content_fields_for_preview = []
        if selected_requirement:
            requirement_id = selected_requirement.get('id')
            content_fields_for_preview = load_label_content_fields(requirement_id)

        col_settings, col_space, col_preview = st.columns([2, 1, 4]) 

        with col_settings:
            st.subheader("‚öôÔ∏è Layout Settings")

            paper_width_default = 100
            paper_height_default = 80

            if selected_requirement and 'label_size' in selected_requirement:
                label_size_str = selected_requirement.get('label_size')
                
                # Ph√¢n t√≠ch chu·ªói c√≥ d·∫°ng 'Width x Height mm'
                if isinstance(label_size_str, str) and 'x' in label_size_str.lower():
                    try:
                        cleaned_str = label_size_str.lower().replace('mm', '').strip()
                        parts = cleaned_str.split('x')
                        if len(parts) == 2:
                            width = int(parts[0].strip())
                            height = int(parts[1].strip())
                            paper_width_default = width
                            paper_height_default = height
                    except (ValueError, TypeError):
                        pass 
            
            col_w, col_h = st.columns(2)
            with col_w:
                paper_width = st.number_input("Paper Width (mm)", min_value=10, max_value=500, value=paper_width_default, step=1)
            with col_h:
                paper_height = st.number_input("Paper Height (mm)", min_value=10, max_value=500, value=paper_height_default, step=1)
            
            font_size = st.slider("Font Size (pt)", 6, 48, 12)

            text_orientation = st.radio("Rotate data", ["Horizontal", "Vertical"], horizontal=True)
            
            st.markdown("---")

            st.write("**Margins (mm)**")
            m_col1, m_col2 = st.columns(2)
            with m_col1:
                margin_top = st.number_input("Top", min_value=0, max_value=paper_height, value=6, step=1)
                margin_left = st.number_input("Left", min_value=0, max_value=int(paper_width/2), value=6, step=1)
            with m_col2:
                margin_bottom = st.number_input("Bottom", min_value=0, max_value=paper_height, value=6, step=1)
                margin_right = st.number_input("Right", min_value=0, max_value=int(paper_width/2), value=6, step=1)

            qr_codes = []
            qr_field_codes = []
            barcodes_1d = []
            barcode_1d_field_codes = []
            
            for field in content_fields_for_preview:
                field_code = field.get("field_code", "")
                field_type = field.get("field_type", "").upper()
                content = base_label_info.get(field_code)
                
                if not content: continue
                
                if field_type == 'QRCODE' or field_type == 'BARCODE_2D':
                    qr_codes.append(content)
                    qr_field_codes.append(field_code)
                elif field_type == 'BARCODE_1D':
                    barcodes_1d.append(content)
                    barcode_1d_field_codes.append(field_code)

            qr_width_mm = 0 
            qr_height_mm = 0
            barcode_1d_width_mm = 0
            barcode_1d_height_mm = 0

            available_height = paper_height - margin_top - margin_bottom

            if qr_codes:
                st.markdown("---")
                st.write("**QR Code Size (mm)**")
                num_qrs = len(qr_codes)
                default_qr_size = max(25, int(available_height / num_qrs) - (5 * (num_qrs -1))) if num_qrs > 0 else 25
                qr_width_mm = st.number_input("QR Size", min_value=10, value=default_qr_size, step=1)
                qr_height_mm = qr_width_mm 

            if barcodes_1d:
                st.markdown("---")
                st.write("**Barcode Size (mm)**")
                default_bc_width = 60
                default_bc_height = 15
                
                bc_col1, bc_col2 = st.columns(2)
                with bc_col1:
                    barcode_1d_width_mm = st.number_input("Barcode Width (mm)", min_value=10, value=default_bc_width, step=1)
                with bc_col2:
                    barcode_1d_height_mm = st.number_input("Barcode Height (mm)", min_value=5, value=default_bc_height, step=1)

        with col_preview:
            st.subheader("üëÅÔ∏è Label Preview")
            
            px_per_mm = 4 
            preview_width_px = int(paper_width * px_per_mm)
            preview_height_px = int(paper_height * px_per_mm)
            margin_top_px = int(margin_top * px_per_mm)
            margin_bottom_px = int(margin_bottom * px_per_mm)
            margin_left_px = int(margin_left * px_per_mm)
            margin_right_px = int(margin_right * px_per_mm)
            inner_width_px = preview_width_px - margin_left_px - margin_right_px
            inner_height_px = preview_height_px - margin_top_px - margin_bottom_px
            
            text_html_content = ' '
            all_display_fields = []
            display_name_map = {}

            # 1. Lu√¥n t·∫£i map tr∆∞·ªùng
            for field in content_fields_for_preview:
                field_code = field.get('field_code')
                field_name = field.get('field_name')
                if field_code:
                    all_display_fields.append(field_code)
                    display_name_map[field_code] = field_name if field_name else field_code
            
            # 2. KI·ªÇM TRA CH·∫æ ƒê·ªò T·∫†O PACKAGE T·ª™ HISTORY
            if st.session_state.get("is_package_from_history", False):
                
                final_package_data_for_preview = base_label_info.copy()
                aggregated_data_for_print = {} # ƒê√¢y l√† d·ªØ li·ªáu S·∫º ƒê∆Ø·ª¢C IN

                history_items = st.session_state.get("package_history_data", [])


                new_dynamic_fields_html = ""
                for key in all_display_fields:

                    # B·ªè qua c√°c tr∆∞·ªùng QR
                    if key in qr_field_codes: continue
                    
                    value = base_label_info.get(key)
                    display_name = display_name_map.get(key, key)
                    
                    if value and str(value).strip() != '' and str(value) != 'N/A':
                        new_dynamic_fields_html += f'<div style="word-wrap: break-word;"><strong>{html.escape(display_name)}:</strong> {html.escape(str(value))}</div>'

                if new_dynamic_fields_html:
                    text_html_content += '<br>'
                    text_html_content += new_dynamic_fields_html

                # LOGIC G·ªòP D·ªÆ LI·ªÜU
                aggregated_data_for_preview = {}

                for item in history_items:

                    # Parse JSON data
                    data_str = item.get('printed_data')
                    data_dict = {}
                    if isinstance(data_str, str) and data_str:
                        try:
                            data_dict = json.loads(data_str)
                        except json.JSONDecodeError:
                            data_dict = {}
                    elif isinstance(data_str, dict): 
                        data_dict = data_str

                    # G·ªôp c√°c gi√° tr·ªã t·ª´ printed_data, ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t
                    for k, v in data_dict.items():
                        field_name_check = display_name_map.get(k, k)

                        # Ki·ªÉm tra t√™n tr∆∞·ªùng ƒë·ªÉ lo·∫°i b·ªè qr code, nh∆∞ng g·ªôp text c·ªßa barcode
                        field_name_check_lower = str(field_name_check).lower()
                        if 'qr code' in field_name_check_lower: continue

                        if k not in aggregated_data_for_print: aggregated_data_for_print[k] = []

                        str_v = str(v)
                        if str_v not in aggregated_data_for_print[k]: # Ch·ªâ th√™m gi√° tr·ªã unique
                            aggregated_data_for_print[k].append(str_v)

                        # G·ªôp cho D·ªÆ LI·ªÜU PREVIEW (ƒë·ªÉ hi·ªÉn th·ªã)
                        if k not in aggregated_data_for_preview: aggregated_data_for_preview[k] = []
                        if str_v not in aggregated_data_for_preview[k]:
                            aggregated_data_for_preview[k].append(str_v)

                # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ g·ªôp V√Ä C·∫¨P NH·∫¨T BI·∫æN D·ªÆ LI·ªÜU
                text_html_content += '<div style="font-size: 0.9em; margin-top: 5px; padding-top: 3px;">'

                # Hi·ªÉn th·ªã c√°c tr∆∞·ªùng data ƒë√£ g·ªôp (cho preview)
                if aggregated_data_for_preview:
                    data_html = ""
                    for k in sorted(aggregated_data_for_preview.keys()): # S·∫Øp x·∫øp key
                        v_list = aggregated_data_for_preview[k]
                        v_list.sort() # S·∫Øp x·∫øp value

                        field_name = display_name_map.get(k, k) 
                        values_str = ", ".join(v_list)
                        data_html += f"<div><strong>{html.escape(field_name)}: {html.escape(values_str)}</strong></div>"
                        
                        # C·∫≠p nh·∫≠t d·ªØ li·ªáu g·ªôp v√†o dict preview
                        final_package_data_for_preview[k] = values_str 
                
                    text_html_content += data_html

                text_html_content += "</div>"

                # === THI·∫æT L·∫¨P D·ªÆ LI·ªÜU IN CU·ªêI C√ôNG CHO PACKAGE LABEL ===
                
                # 1. Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu in (list) th√†nh string
                final_aggregated_data_for_print = {}
                for k, v_list in aggregated_data_for_print.items():
                    v_list.sort()
                    final_aggregated_data_for_print[k] = ", ".join(v_list)

                # 2. G√°n CH·ªà d·ªØ li·ªáu ƒë√£ g·ªôp cho label_info
                label_info = final_aggregated_data_for_print
                
                # 3. X√≥a t·∫•t c·∫£ QR Code v√† Barcode (v√¨ kh√¥ng l·∫•y t·ª´ form m·ªõi)
                qr_codes = []
                qr_field_codes = []
                barcodes_1d = []
                barcode_1d_field_codes = []

            else:
                # LOGIC HI·ªÇN TH·ªä PREVIEW TI√äU CHU·∫®N (CHO ITEM/CARTON LABEL)
                # G√°n dict c∆° s·ªü cho label_info
                label_info = base_label_info 
                
                for key in all_display_fields:

                    if key in qr_field_codes: continue

                    value = label_info.get(key) # D√πng label_info ƒë√£ ƒë∆∞·ª£c g√°n
                    display_name = display_name_map.get(key, key)

                    if value and str(value).strip() != '':
                        text_html_content += f'<div style="word-wrap: break-word;"><strong>{html.escape(display_name)}: {html.escape(str(value))}</strong></div>'
            
            # ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ bao g·ªìm c·∫£ QR v√† Barcode
            image_html_block = ""
            if qr_codes or barcodes_1d:
                all_images_html_list = []
                
                if qr_codes:
                    qr_width_px = int(qr_width_mm * px_per_mm)
                    
                    for qr_content_item in qr_codes:
                        qr = qrcode.QRCode(version=1, box_size=10, border=2)
                        qr.add_data(str(qr_content_item))
                        qr.make(fit=True)
                        img = qr.make_image(fill_color="black", back_color="white")
                        
                        buffered = BytesIO()
                        img.save(buffered, format="PNG")
                        qr_image_b64 = base64.b64encode(buffered.getvalue()).decode()
                        
                        all_images_html_list.append(
                            f'<img src="data:image/png;base64,{qr_image_b64}" style="width: {qr_width_px}px; height: auto;">'
                        )
                
                if barcodes_1d: # Th√™m logic t·∫°o 1D barcode
                    bc_width_px = int(barcode_1d_width_mm * px_per_mm)
                    bc_height_px = int(barcode_1d_height_mm * px_per_mm)
                    
                    for bc_content_item in barcodes_1d:
                        try:
                            # S·ª≠ d·ª•ng Code 128 l√†m m·∫∑c ƒë·ªãnh v√¨ n√≥ m·∫°nh m·∫Ω
                            BARCODE_CLASS = barcode.get_barcode_class('code128')
                            
                            options = {
                                'module_height': barcode_1d_height_mm, # Chi·ªÅu cao t√≠nh b·∫±ng mm
                                'font_size': 6, # C·ª° ch·ªØ cho vƒÉn b·∫£n b√™n d∆∞·ªõi
                                'text_distance': 1.5, # Kho·∫£ng c√°ch t·ª´ v·∫°ch ƒë·∫øn vƒÉn b·∫£n
                                'quiet_zone': 0, # L·ªÅ
                                'write_text': False # ·∫®n vƒÉn b·∫£n
                            }
                            
                            bc = BARCODE_CLASS(str(bc_content_item), writer=ImageWriter())
                            
                            buffered = BytesIO()
                            bc.write(buffered, options) # Ghi v√†o buffer
                            
                            buffered.seek(0)
                            bc_image_b64 = base64.b64encode(buffered.getvalue()).decode()
                            
                            all_images_html_list.append(
                                f'<img src="data:image/png;base64,{bc_image_b64}" style="width: {bc_width_px}px; height: {bc_height_px}px;">'
                            )
                        except Exception as e:
                            # Hi·ªÉn th·ªã l·ªói n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c barcode
                            logger.error(f"Failed to generate 1D barcode for '{bc_content_item}': {e}")
                            all_images_html_list.append(
                                f'<div style="width: {bc_width_px}px; height: {bc_height_px}px; border: 1px dashed red; color: red; font-size: 9pt; word-wrap: break-word; overflow: hidden; margin-bottom: {int(2*px_per_mm)}px;">'
                                f'Error: Could not generate barcode for:<br>{html.escape(str(bc_content_item))}'
                                f'</div>'
                            )
                
                all_images_html_str = "".join(all_images_html_list)
                image_html_block = f"""
                <div style="flex-shrink: 0; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                    {all_images_html_str}
                </div>
                """
            
            text_orientation_style = ""
            if text_orientation == "Vertical":
                text_orientation_style = "writing-mode: vertical-rl; transform: rotate(180deg);"
            
            text_div_html = ""
            if text_html_content and text_html_content.strip() != "":
                text_div_html = f"""
                <div style="flex-grow: 1; padding-right: {int(5*px_per_mm)}px; min-width: 0; {text_orientation_style}">
                    {text_html_content}
                </div>
                """
            
            label_html = textwrap.dedent(f"""
                <div style="
                    width: {preview_width_px}px; height: {preview_height_px}px;
                    padding: {margin_top_px}px {margin_right_px}px {margin_bottom_px}px {margin_left_px}px;
                    border: 2px solid #ccc; background-color: white; color: black;
                    font-family: Arial, sans-serif; font-size: {font_size*0.9}pt; 
                    overflow: hidden; box-sizing: border-box; display: flex;
                    justify-content: space-between; align-items: center;
                ">
                    <div style="max-height: {preview_height_px - margin_top_px - margin_bottom_px}px; 
                        max-width: {preview_width_px - margin_left_px - margin_right_px}px; overflow: hidden">{text_div_html}</div>
                    {image_html_block} 
                </div>
            """)
            
            st.markdown(label_html, unsafe_allow_html=True)

        st.markdown("---")

        col_printer, col_copies = st.columns([3, 1])

        with col_printer:
            printers = printer_svc.get_printers()
            godex_printer_index = None
            if printers:
                for i, p in enumerate(printers):
                    if "Godex G500" in p:
                        godex_printer_index = i
                        break
            
            selected_printer = st.selectbox(
                "üñ®Ô∏è Select printer:",
                printers,
                index=godex_printer_index if godex_printer_index is not None else 0,
                help="Danh s√°ch m√°y in ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n m√°y t√≠nh Windows c·ªßa b·∫°n"
            )
            if not printers:
                st.warning("Printer not found. Please install printer driver", icon="üö®")
        
        with col_copies:
            num_copies = st.number_input("Copies", min_value=1, value=max(1, int(number_of_labels)), step=1, disabled=True)
        
        st.write("") 

        # === KH·ªûI T·∫†O B·∫¢N ƒê·ªí T√äN (NAME MAP) T·ªîNG H·ª¢P ===

        field_code_to_name = labels_svc.get_system_field_map()

        # T·∫£i v√† c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒê·ªòNG (t·ª´ get_label_content_fields)
        # C√°c tr∆∞·ªùng n√†y s·∫Ω GHI ƒê√à t√™n m·∫∑c ƒë·ªãnh n·∫øu 'field_code' b·ªã tr√πng.
        db_fields = {
            f.get('field_code'): f.get('field_name') 
            for f in content_fields_for_preview 
            if f.get('field_code') and f.get('field_name')
        }
        field_code_to_name.update(db_fields)
        
        col1_btn, col2_btn, col3_btn = st.columns([2, 2, 2]) 
        with col1_btn:
            st.button("‚¨ÖÔ∏è Back to Select Product", on_click=switch_to_select_product_tab, width='stretch')
        
        with col2_btn:
            st.button(
                "üñ®Ô∏è Print Godex G500",
                type="primary",
                disabled=not selected_printer if printers else True,
                key="print_button",
                width='stretch'
            )
        
        with col3_btn:
            qr_field_names = [field_code_to_name.get(code, code) for code in qr_field_codes]
            ezpx_data = printer_svc.generate_ezpx_xml(
                label_type_name=lt_name, label_data=label_info,
                qr_codes=qr_codes, qr_field_names=qr_field_names,
                paper_width_mm=paper_width, paper_height_mm=paper_height,
                font_size_pt=font_size,
                margins_mm=(margin_top, margin_bottom, margin_left, margin_right),
                qr_size_mm=(qr_width_mm, qr_height_mm), num_copies=num_copies
            )
            
            st.download_button(
                label="üíæ Save Label (EZPX)", data=ezpx_data,
                file_name=f"{lt_name.replace(' ', '_')}.ezpx", mime="application/xml",
                width='stretch'
            )

        if st.session_state.get("print_button"):

            # Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† tr∆∞·ªùng h·ª£p in PACKAGE_LABEL t·ª´ History kh√¥ng
            is_package_print_from_history = (
                label_template == "PACKAGE_LABEL" and 
                st.session_state.get("is_package_from_history", False)
            )

            if is_package_print_from_history:
                all_display_fields = list(label_info.keys())
            
            else:
                all_display_fields = []
                for field in content_fields_for_preview:
                    if field.get('field_code'):
                        all_display_fields.append(field.get('field_code'))

            zpl_commands = printer_svc.generate_zpl_commands( 
                label_data=label_info,
                qr_codes=qr_codes, 
                qr_field_codes=qr_field_codes,
                paper_width_mm=paper_width, 
                paper_height_mm=paper_height,
                font_size_pt=font_size,
                margins_mm=(margin_top, margin_bottom, margin_left, margin_right),
                qr_size_mm=(qr_width_mm, qr_height_mm),
                barcodes_1d=barcodes_1d,
                barcode_1d_field_codes=barcode_1d_field_codes,
                barcode_1d_size_mm=(barcode_1d_width_mm, barcode_1d_height_mm),
                num_copies=num_copies,
                field_order=all_display_fields,
                text_orientation=text_orientation,
                display_name_map=field_code_to_name
            )

            success, message = printer_svc.send_raw_data_to_printer(selected_printer, zpl_commands)

            print_status = "SUCCESS" if success else "FAILED"
            error_msg = message if not success else None

            printed_by_user = st.session_state.get("username", "system_user")

            # L·ªçc d·ªØ li·ªáu d·ª±a tr√™n all_display_fields ƒë√£ ƒë∆∞·ª£c m·ªü r·ªông
            # filtered_printed_data = {key: label_info.get(key) for key in all_display_fields if key in label_info}
            filtered_printed_data = {}
            for key in all_display_fields:
                if key in label_info:
                    value = label_info.get(key)
                    # Chuy·ªÉn ƒë·ªïi date/datetime th√†nh chu·ªói ISO 8601 (v√≠ d·ª•: '2025-10-27')
                    if isinstance(value, (datetime, date)):
                        filtered_printed_data[key] = value.isoformat()
                    else:
                        filtered_printed_data[key] = value

            history_data = {
                # C√°c tr∆∞·ªùng b·∫Øt bu·ªôc
                "requirement_id": selected_requirement.get('id') if selected_requirement else None,
                "customer_id": customer_id,
                'entity_id': entity_id,
                "label_type": label_template,
                "printed_by": printed_by_user,

                # C√°c tr∆∞·ªùng theo y√™u c·∫ßu
                "customer_name": product_info.get('customer'),
                "legal_entity": product_info.get('legal_entity'),
                # L·∫•y d·ªØ li·ªáu ƒë√£ g·ªôp t·ª´ label_info n·∫øu l√† package, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ product_info
                "dn_number": product_info.get('dn_number'), 
                "product_pn": product_info.get('product_pn'),
                "pt_code": product_info.get('pt_code'),
                "selling_quantity": product_info.get('total_selling_qty'),
                "standard_quantity": qty_per_carton if label_template in ["CARTON_LABEL", "ITEM_LABEL"] else 1,
                "label_size": f"{paper_width}x{paper_height}mm",
                "printed_data": filtered_printed_data, # Dict ch·ª©a T·∫§T C·∫¢ d·ªØ li·ªáu ƒë√£ in
                "print_status": print_status,
                
                # C√°c tr∆∞·ªùng h·ªØu √≠ch kh√°c
                "printer_name": selected_printer,
                "print_quantity": num_copies,
                "error_message": error_msg
            }

            hist_success, hist_msg, new_hist_id = labels_svc.add_label_print_history(history_data)

            if not hist_success:
                st.error(f"L·ªñI L∆ØU L·ªäCH S·ª¨: {hist_msg}")
            
            if success:
                st.success(message)
            else:
                st.error(message)

    else:
        st.warning("No products selected yet. Please return to tab 'üì¶ Select Product' to get started", icon="üö®") 
        st.button("‚¨ÖÔ∏è Back to Select Product", on_click=switch_to_select_product_tab)

# --- TAB 3: L·ªäCH S·ª¨ IN TEM ---
elif tab_selection == "‚åõ History Label Printing":
    
    st.subheader("‚åõ History of label printing")

    # T·∫£i d·ªØ li·ªáu
    @st.cache_data(ttl=600)
    def load_customers_for_history():
        all_customers = [{"customer_id": None, "customer_english_name": "All customers", "customer_code": ""}]
        all_customers.extend(labels_svc.get_active_customers())
        return all_customers

    customers_list = load_customers_for_history()

    @st.cache_data(ttl=600)
    def load_entity_for_history():
        all_entities = [{"entity_id": None, "entity_english_name": "All entities", "entity_code": ""}]
        all_entities.extend(labels_svc.get_active_entities())
        return all_entities

    entities_list = load_entity_for_history()

    with st.expander("üîç Search and Filter", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1:
            today = datetime.now().date()
            seven_days_ago = today - timedelta(days=7)
            date_range = st.date_input(
                "Printed Date",
                value=(seven_days_ago, today),
                key="history_date_range",
                help="Ch·ªçn kho·∫£ng th·ªùi gian t√¨m ki·∫øm"
            )
            start_date = date_range[0] if date_range and len(date_range) > 0 else seven_days_ago
            end_date = date_range[1] if date_range and len(date_range) > 1 else today

            selected_customer_hist = st.selectbox(
                "*Customer",
                options=customers_list,
                format_func=lambda c: f"{c['customer_english_name']}" + (f" ({c['customer_code']})" if c['customer_code'] else ""),
                key="history_customer"
            )

            selected_entity_hist = st.selectbox(
                "*Entity",
                options=entities_list,
                format_func=lambda c: f"{c['entity_english_name']}" + (f" ({c['entity_code']})" if c['entity_code'] else ""),
                key="history_entity"
            )
    
        with col2:
            dn_filter = st.text_input("DN Number", placeholder="Enter DN Number...")

            label_type_options = ["All", "ITEM_LABEL", "CARTON_LABEL", "PACKAGE_LABEL"]

            label_type_filter = st.selectbox("*Label Type", label_type_options, key="history_label_type")

        with col3:
            pt_code_filter = st.text_input("PT Code", placeholder="Enter PT Code...")

            status_options = ["All", "SUCCESS", "FAILED", "CANCELLED"]
            status_filter = st.selectbox("Print Status", status_options, key="history_status")

    # Hi·ªÉn th·ªã d·ªØ li·ªáu

    # T·∫£i d·ªØ li·ªáu
    @st.cache_data(ttl=60)
    def fetch_history_data(start_date, end_date, customer_id, entity_id, dn_number, pt_code, print_status, label_type):
        try:
            return labels_svc.get_label_print_history(
                start_date=start_date,
                end_date=end_date,
                customer_id=customer_id,
                entity_id=entity_id,
                dn_number=dn_number,
                pt_code=pt_code,
                print_status=print_status,
                label_type=label_type
            )
        except Exception as e:
            st.error(f"An error occurred while loading data: {e}")
            return []

    customer_id_filter_val = selected_customer_hist.get('customer_id')
    entity_id_filter_val = selected_entity_hist.get('entity_id')
    dn_filter_val = dn_filter if dn_filter else None
    pt_code_filter_val = pt_code_filter if pt_code_filter else None
    status_filter_val = status_filter if status_filter != "All" else None
    label_type_filter_val = label_type_filter if label_type_filter != "All" else None

    history_data = fetch_history_data(
        start_date=start_date,
        end_date=end_date,
        customer_id=customer_id_filter_val,
        entity_id=entity_id_filter_val,
        dn_number=dn_filter_val,
        pt_code=pt_code_filter_val,
        print_status=status_filter_val,
        label_type=label_type_filter_val
    )

    if history_data:
        df_history = pd.DataFrame(history_data)

        display_columns = [
            'printed_date', 
            'customer_name', 
            'legal_entity',
            'dn_number', 
            'product_pn', 
            'pt_code', 
            'selling_quantity',
            'standard_quantity',
            'print_quantity', 
            'label_type', 
            'label_size', 
            'print_status', 
            'printed_by', 
            'printed_data'
        ]

        final_columns = [col for col in display_columns if col in df_history.columns]
        df_display = df_history[final_columns].copy()

        st.success(f"Found {len(df_display)} results")

        gb = GridOptionsBuilder.from_dataframe(df_display)

        is_customer_selected = customer_id_filter_val is not None

        is_entity_selected = entity_id_filter_val is not None

        if is_customer_selected and is_entity_selected and label_type_filter_val == 'CARTON_LABEL':
            gb.configure_selection(
                'multiple',
                use_checkbox=True,
                header_checkbox=True,
                groupSelectsChildren=True
            )
        else:
            gb.configure_selection(
                'multiple',
                use_checkbox=False,
                header_checkbox=False,
                groupSelectsChildren=False
            )

        gb.configure_pagination(paginationAutoPageSize=True)
        gb.configure_side_bar(filters_panel=True, columns_panel=True)
        gb.configure_default_column(
            resizable=True, filterable=True, sortable=True, 
            wrapText=True, autoHeight=True
        )

        # ƒê·ªãnh d·∫°ng c·ªôt ng√†y
        gb.configure_column(
            "printed_date", 
            headerName="Printed Date",
            type=["dateColumn", "nonEditableColumn"], 
            custom_format_string='yyyy-MM-dd HH:mm:ss', 
            width=200,
            sort='desc'
        )

        # ƒê·ªãnh d·∫°ng c·ªôt JSON
        gb.configure_column("printed_data", headerName="Printed Data", width=300)

        gridOptions = gb.build()

        if not is_customer_selected or not is_entity_selected or not label_type_filter_val == 'CARTON_LABEL':
            st.info("‚ÑπÔ∏è Please select a customer, entity and label type CARTON_LABEL to be able to select labels")

        grid_response_history = AgGrid(
            df_display,
            gridOptions=gridOptions,
            data_return_mode=DataReturnMode.AS_INPUT,
            update_on=['selectionChanged'], 
            fit_columns_on_grid_load=False,
            height=500,
            width='100%',
            key='history_grid',
            allow_unsafe_jscode=True,
        )
        selected_rows_data = grid_response_history.get('selected_rows')
        
        if isinstance(selected_rows_data, pd.DataFrame):
            is_row_selected = not selected_rows_data.empty
        elif isinstance(selected_rows_data, list):
            is_row_selected = len(selected_rows_data) > 0
        else:
            is_row_selected = False

        button_disabled = not (is_customer_selected and is_row_selected)

        st.button(
            "üì¶ Create Package Label",
            disabled=button_disabled,
            type="primary",
            key="create_package_label_hist",
            width='stretch'
        )

        # X·ª¨ L√ù S·ª∞ KI·ªÜN CLICK N√öT "CREATE PACKAGE LABEL"
        if st.session_state.get("create_package_label_hist"):
            # 1. L·∫•y d·ªØ li·ªáu ƒë√£ ch·ªçn
            if isinstance(selected_rows_data, pd.DataFrame):
                selected_df = selected_rows_data
            elif isinstance(selected_rows_data, list):
                selected_df = pd.DataFrame(selected_rows_data)
            else:
                selected_df = pd.DataFrame()

            if not selected_df.empty:
                # 2. L·∫•y Customer ID (ƒë√£ ƒë∆∞·ª£c ch·ªçn trong b·ªô l·ªçc)
                customer_id_for_pkg = customer_id_filter_val # ƒê√¢y l√† ID
                customer_name_for_pkg = selected_customer_hist.get('customer_english_name', 'N/A')

                entity_id_for_pkg = entity_id_filter_val
                entity_name_for_pkg = selected_entity_hist.get('entity_english_name', 'N/A')

                try:
                    total_std_qty_sum = selected_df['standard_quantity'].sum()
                    total_sel_qty_sum = selected_df['selling_quantity'].sum()
                except Exception as e:
                    st.error(f"L·ªói khi t√≠nh t·ªïng s·ªë l∆∞·ª£ng: {e}. ƒê·∫∑t t·∫°m b·∫±ng 0.")
                    total_std_qty_sum = 1
                    total_sel_qty_sum = 1

                # 3. T·ªïng h·ª£p d·ªØ li·ªáu ƒë·ªÉ "gi·∫£ l·∫≠p" m·ªôt product_info cho Tab 2
                package_product_info = {
                    'customer': customer_name_for_pkg,
                    'legal_entity': ', '.join(selected_df['legal_entity'].astype(str).unique()),
                    'dn_number': ', '.join(selected_df['dn_number'].astype(str).unique()),
                    'product_pn': ', '.join(selected_df['product_pn'].astype(str).unique()),
                    'product_mapped_code': 'N/A',
                    'product_mapped_name': 'N/A',
                    'pt_code': ', '.join(selected_df['pt_code'].astype(str).unique()),
                    'batch_no': 'N/A',
                    'package_size': 'N/A',
                    'shelf_life': 'N/A',
                    'total_standard_qty': total_std_qty_sum, 
                    'total_selling_qty': total_sel_qty_sum, 
                    'brand': 'N/A'
                }
                
                # 4. C·∫≠p nh·∫≠t session_state ƒë·ªÉ Tab 2 s·ª≠ d·ª•ng
                st.session_state.product_for_label = package_product_info
                st.session_state.customer_id_for_label = customer_id_for_pkg
                st.session_state.entity_id_for_label = entity_id_for_pkg

                # ƒê·∫∑t l·∫°i label_preview_data v·ªõi th√¥ng tin c∆° b·∫£n n√†y
                st.session_state.label_preview_data = package_product_info.copy()

                # L·∫•y danh s√°ch c√°c h√†ng ƒë√£ ch·ªçn
                selected_rows_list = selected_df.to_dict('records')

                # ƒê·∫∑t c·ªù v√† d·ªØ li·ªáu cho ch·∫ø ƒë·ªô preview ƒë·∫∑c bi·ªát
                st.session_state.is_package_from_history = True
                st.session_state.package_history_data = selected_rows_list

                # G·ª¨I T√çN HI·ªÜU qua Tab 2 ƒë·ªÉ t·ª± ƒë·ªông ch·ªçn "PACKAGE_LABEL"
                st.session_state.default_label_type_override = "PACKAGE_LABEL"

                # 5. Chuy·ªÉn tab
                st.session_state.next_tab = "üëÅÔ∏è‚Äçüó®Ô∏è Preview and Create Label"

                # 6. Rerun ƒë·ªÉ thay ƒë·ªïi c√≥ hi·ªáu l·ª±c
                st.rerun()
        
        if button_disabled:
            if not is_customer_selected:
                pass
            elif not is_row_selected:
                st.caption("‚ÑπÔ∏è *Please select at least one row in the grid to create a Package Label.*")

    else:
        st.info("No records were found matching the search criteria")